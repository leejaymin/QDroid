<?xml version='1.0'?><example><category>Computational Sciences</category><section-title>
 <link ref="CellularAutomata">Cellular Automata </link>
</section-title><caption>compute properties of an elementary cellular automaton</caption><input>rule 110</input><caption>specify range and number of colors</caption><input>CA 3-color, range 1, rule 4594122302107</input><caption>specify a totalistic cellular automaton</caption><input>3-color code 1086</input><section-title>
 <link ref="SubstitutionSystems">Substitution Systems </link>
</section-title><caption>analyze a substitution system</caption><input>substitution system 0-&gt;10, 1-&gt;01</input><input>substitution system 1-&gt;2, 2-&gt;31, 3-&gt;24, 4-&gt;15, 5-&gt;2</input><caption>specify a neighbor-dependent system</caption><input>substitution system 01-&gt;2, 2-&gt;012, 1-&gt;12</input><section-title>
 <link ref="TuringMachines">Turing Machines </link>
</section-title><caption>compute properties of a Turing machine</caption><input>Turing machine 2506</input><caption>specify initial conditions</caption><input>evolve TM 120597441632 on random tape, width = 5</input><caption>name a famous Turing machine</caption><input>Busy Beaver 3-states 3-colors</input><section-title>
 <link ref="ComputationalComplexity">Computational Complexity </link>
</section-title><caption>get information about a complexity class</caption><input>non-deterministic polynomial time</input><caption>compare complexity classes</caption><input>NC vs NLINSPACE</input><section-title>
 <link ref="AlgebraicCodes">Algebraic Codes </link>
</section-title><caption>analyze an algebraic code</caption><input>cyclic code 36, 2</input><caption>find codes with a given level of error correction</caption><input>codes that can correct 7 errors</input><section-title>
 <link ref="Fractals">Fractals </link>
</section-title><caption>draw a fractal set</caption><input>Koch snowflake</input><input>Sierpinski gasket</input><input>Haferman carpet</input><section-title>Functional Programming</section-title><caption>use functional programming constructs such as Map</caption><input>sin /@ {pi/6, pi/5, pi/4, pi/3, pi/2, pi}</input><caption>use pure functions</caption><input>sin(pi/#)&amp; /@ {6,5,4,3,2,1}</input></example>